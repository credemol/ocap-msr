/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ocap.msr.api;

import ocap.msr.model.NewSeatVO;
import ocap.msr.model.SeatVO;
import ocap.msr.model.UserVO;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-09-19T16:58:30.268+09:00")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "", notes = "Returns a user", response = UserVO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "user response", response = UserVO.class) })
    
    @RequestMapping(value = "/users/findByEmail",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UserVO> findUserByEmail( @NotNull@ApiParam(value = "user's email", required = true) @RequestParam(value = "email", required = true) String email);


    @ApiOperation(value = "", notes = "Returns a user", response = UserVO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "user response", response = UserVO.class) })
    
    @RequestMapping(value = "/users/findByFacebookId",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UserVO> findUserByFacebookId( @NotNull@ApiParam(value = "user's facebook id", required = true) @RequestParam(value = "facebookId", required = true) String facebookId);


    @ApiOperation(value = "", notes = "Returns a user", response = UserVO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "user response", response = UserVO.class) })
    
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UserVO> findUserById(@ApiParam(value = "ID of seat to fetch",required=true ) @PathVariable("id") Long id);


    @ApiOperation(value = "", notes = "return all users registered MSR system ", response = UserVO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "user list", response = UserVO.class, responseContainer = "List") })
    
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<UserVO>> findUsers(@ApiParam(value = "email to filter by") @RequestParam(value = "email", required = false) String email,@ApiParam(value = "maximum number of results to return") @RequestParam(value = "limit", required = false) Integer limit);

    
    @RequestMapping(value = "/users/changePassword",
            produces = { "application/json" }, 
            consumes = { "application/json" },
            method = RequestMethod.PUT)
        ResponseEntity<Void> changePassword(@ApiParam(value = "user's email",required=true ) @RequestParam(value="email", required=true) String email,
        		@ApiParam(value = "old password",required=true ) @RequestParam(value="oldPassword", required=true) String oldPassword,
        		@ApiParam(value = "new password",required=true ) @RequestParam(value="newPassword", required=true) String newPassword);

}
